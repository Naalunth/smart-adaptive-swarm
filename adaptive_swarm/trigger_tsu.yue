-- Event Type: TSU
-- Check On... Every Frame

(allStates, ...) -> with aura_env
    -- return early to avoid processing too much
    if GetTime! <= .nextUpdate then return false

    getExpirationTime = (id) ->
        start, duration = GetSpellCooldown id
        start + duration
    swarmExpirationTime = getExpirationTime .SPELL_SWARM
    gcdExpirationTime = getExpirationTime .SPELL_GCD

    -- find the previous state
    previousState = nil
    for _, state in pairs(allStates)
        previousState = state
        break
    
    changeMade = false

    -- highlight nothing if swarm isn't ready to be used
    if swarmExpirationTime == gcdExpirationTime
        .nextUpdate = GetTime! + .config.updateInterval

        swarmUnit = if .shouldCastOnFocus! then .focusTarget else .optimalAlly! ?? .lowestHealth!
        
        if swarmUnit?
            if swarmUnit == previousState?.unit
                previousState.changed = false
                return false

            -- play the focus sound
            sound = if .config.sound != .CONFIG_SOUND_NEVER and swarmUnit == .focusTarget then .SOUND_FOCUS
            -- or cooldown sound
            elseif .config.sound == .CONFIG_SOUND_ALL and not previousState? then .SOUND_COOLDOWN
            else .SOUND_NONE

            allStates[swarmUnit] = 
                show: true
                changed: true
                playSound: sound
                unit: swarmUnit
            changeMade = true

    else
        .nextUpdate = swarmExpirationTime
    
    if previousState? then
        previousState.show = false
        previousState.changed = true
        changeMade = true

    return changeMade
